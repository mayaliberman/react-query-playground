{"version":3,"sources":["components/Navbar.js","components/Planet.js","components/Planets.js","components/People.js","App.js","index.js"],"names":["Navbar","setPage","onClick","Planet","planet","className","name","population","terrain","fetchPlanets","a","pageNum","fetch","res","json","Planets","useState","page","useQuery","keepPreviousData","data","isLoading","isError","isPreviousData","isFetching","old","Math","max","disabled","next","results","map","People","queryClient","QueryClient","App","client","initialIsOpen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAWeA,EATA,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAChB,OACC,gCACC,wBAAQC,QAAS,kBAAMD,EAAQ,YAA/B,qBACA,wBAAQC,QAAS,kBAAMD,EAAQ,WAA/B,wB,iCCMYE,EAVA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjB,OACC,sBAAKC,UAAU,OAAf,UACC,6BAAKD,EAAOE,OACZ,8CAAiBF,EAAOG,cACxB,2CAAcH,EAAOI,eCJlBC,EAAY,uCAAG,0CAAAC,EAAA,6DAAOC,EAAP,+BAAiB,EAAjB,SACFC,MAAM,uCAAD,OAAwCD,IAD3C,cACdE,EADc,yBAEbA,EAAIC,QAFS,2CAAH,qDAkDHC,EA7CC,WACf,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAahB,EAAb,KAEA,EAAiEiB,mBAChE,CAAC,UAAWD,IACZ,kBAAMR,EAAaQ,KACnB,CAAEE,kBAAkB,IAHbC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,QAASC,EAAlC,EAAkCA,eAAgBC,EAAlD,EAAkDA,WAMlD,OACC,gCACC,yCACA,gDAAmBP,KACnB,wBACCf,QAAS,kBAAMD,GAAQ,SAACwB,GAAD,OAASC,KAAKC,IAAIF,EAAM,EAAG,OAClDG,SAAmB,IAATX,EAFX,2BAMA,wBACCf,QAAS,YACHqB,GAAkBH,EAAKS,MAC3B5B,GAAQ,SAACwB,GAAD,OAASA,EAAM,MAGzBG,SAAUL,KAAkB,OAACH,QAAD,IAACA,OAAD,EAACA,EAAMS,MANpC,uBAUCL,EAAa,+CAA2B,KAAM,IAC9CH,EACA,6CACGC,EACH,wCAEA,8BACEF,EAAKU,QAAQC,KAAI,SAAC3B,GAAD,OACjB,cAAC,EAAD,CAAQA,OAAQA,GAAaA,EAAOE,eCrC3B0B,EARA,WACd,OACC,8BACC,2C,QCGGC,EAAc,IAAIC,cAkBTC,MAjBf,WAEE,MAAwBnB,mBAAS,WAAjC,mBAAOC,EAAP,KAAahB,EAAb,KACA,OACA,eAAC,sBAAD,CAAqBmC,OAAQH,EAA7B,UACC,sBAAK5B,UAAU,MAAf,UACC,gDACA,cAAC,EAAD,CAAQJ,QAASA,IACjB,qBAAKI,UAAU,UAAf,SACW,YAATY,EAAqB,cAAC,EAAD,IAAc,cAAC,EAAD,SAGtC,cAAC,qBAAD,CAAoBoB,eAAe,QCbtCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e81097a1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = ({setPage}) => {\r\n\treturn (\r\n\t\t<nav>\r\n\t\t\t<button onClick={() => setPage('planets')}>Planets</button>\r\n\t\t\t<button onClick={() => setPage('people')}>People</button>\r\n\t\t</nav>\r\n\t);\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Planet = ({ planet }) => {\r\n\treturn (\r\n\t\t<div className=\"card\">\r\n\t\t\t<h3>{planet.name}</h3>\r\n\t\t\t<p>Population = {planet.population}</p>\r\n\t\t\t<p>Terrain = {planet.terrain}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Planet;\r\n","import React, { useState } from 'react';\r\nimport { useQuery } from 'react-query';\r\nimport Planet from './Planet';\r\nconst fetchPlanets = async (pageNum = 1) => {\r\n\tconst res = await fetch(`https://swapi.dev/api/planets/?page=${pageNum}`);\r\n\treturn res.json();\r\n};\r\n\r\nconst Planets = () => {\r\n\tconst [page, setPage] = useState(1);\r\n\r\n\tconst { data, isLoading, isError, isPreviousData, isFetching } = useQuery(\r\n\t\t['planets', page],\r\n\t\t() => fetchPlanets(page),\r\n\t\t{ keepPreviousData: true }\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Planets</h2>\r\n\t\t\t<h3>Current Page: {page}</h3>\r\n\t\t\t<button\r\n\t\t\t\tonClick={() => setPage((old) => Math.max(old - 1, 0))}\r\n\t\t\t\tdisabled={page === 1}\r\n\t\t\t>\r\n\t\t\t\tPrevious Page\r\n\t\t\t</button>\r\n\t\t\t<button\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tif (!isPreviousData && data.next) {\r\n\t\t\t\t\t\tsetPage((old) => old + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t\tdisabled={isPreviousData || !data?.next}\r\n\t\t\t>\r\n\t\t\t\tNext Page\r\n\t\t\t</button>\r\n\t\t\t{isFetching ? <span> Loading...</span> : null}{' '}\r\n\t\t\t{isLoading ? (\r\n\t\t\t\t<div>Loading...</div>\r\n\t\t\t) : isError ? (\r\n\t\t\t\t<div>Error</div>\r\n\t\t\t) : (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{data.results.map((planet) => (\r\n\t\t\t\t\t\t<Planet planet={planet} key={planet.name} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Planets;\r\n","const People = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>People</h2>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default People;\r\n","import React, {useState} from 'react';\nimport Navbar from './components/Navbar';\nimport Planets from './components/Planets';\nimport People from './components/People';\nimport { QueryClientProvider, QueryClient } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nconst queryClient = new QueryClient();\nfunction App() {\n\n  const [page, setPage] = useState('planets');\n  return (\n\t\t<QueryClientProvider client={queryClient}>\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Star Wars Info</h1>\n\t\t\t\t<Navbar setPage={setPage} />\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t{page === 'planets' ? <Planets /> : <People />}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ReactQueryDevtools initialIsOpen={false} />\n\t\t</QueryClientProvider>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}